### YamlMime:ManagedReference
items:
- uid: Conizi.Model.Core.Tools.Validator
  commentId: T:Conizi.Model.Core.Tools.Validator
  id: Validator
  parent: Conizi.Model.Core.Tools
  children:
  - Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense(System.String)
  - Conizi.Model.Core.Tools.Validator.ValidateSchema(System.String,System.Collections.Generic.IList{System.String}@)
  - Conizi.Model.Core.Tools.Validator.ValidateSchema(System.Type,System.String,System.Collections.Generic.IList{System.String}@)
  - Conizi.Model.Core.Tools.Validator.ValidateSchema``1(System.String,System.Collections.Generic.IList{System.String}@)
  langs:
  - csharp
  - vb
  name: Validator
  nameWithType: Validator
  fullName: Conizi.Model.Core.Tools.Validator
  type: Class
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Validator.cs
      branch: schemagenerator
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: Validator
    path: ../src/Conizi.Model.Core/Tools/Validator.cs
    startLine: 16
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nThe conizi schema validator is used to validate a JSON message against the assigned Schema.\nThe validator is build around the C# library <a href=\"https://www.nuget.org/packages/Newtonsoft.Json.Schema/\">Newtonsoft.Json.Schema</a>.\n"
  remarks: You can use this <a href="https://www.nuget.org/packages/Newtonsoft.Json.Schema/">Newtonsoft.Json.Schema</a> for free in a small context, to validate a huge amount of messages, you must buy a license.
  example: []
  syntax:
    content: public class Validator
    content.vb: Public Class Validator
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense(System.String)
  commentId: M:Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense(System.String)
  id: RegisterJsonSchemaLicense(System.String)
  parent: Conizi.Model.Core.Tools.Validator
  langs:
  - csharp
  - vb
  name: RegisterJsonSchemaLicense(String)
  nameWithType: Validator.RegisterJsonSchemaLicense(String)
  fullName: Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense(System.String)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Validator.cs
      branch: schemagenerator
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: RegisterJsonSchemaLicense
    path: ../src/Conizi.Model.Core/Tools/Validator.cs
    startLine: 23
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nRegister a JsonSchema License if available\n"
  example: []
  syntax:
    content: public static void RegisterJsonSchemaLicense(string license)
    parameters:
    - id: license
      type: System.String
      description: <a href="https://www.nuget.org/packages/Newtonsoft.Json.Schema/">Newtonsoft.Json.Schema</a> license as string
    content.vb: Public Shared Sub RegisterJsonSchemaLicense(license As String)
  overload: Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.String,System.Collections.Generic.IList{System.String}@)
  commentId: M:Conizi.Model.Core.Tools.Validator.ValidateSchema(System.String,System.Collections.Generic.IList{System.String}@)
  id: ValidateSchema(System.String,System.Collections.Generic.IList{System.String}@)
  parent: Conizi.Model.Core.Tools.Validator
  langs:
  - csharp
  - vb
  name: ValidateSchema(String, out IList<String>)
  nameWithType: Validator.ValidateSchema(String, out IList<String>)
  fullName: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.String, out System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Validator.cs
      branch: schemagenerator
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: ValidateSchema
    path: ../src/Conizi.Model.Core/Tools/Validator.cs
    startLine: 59
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nValidate a JSON message vs the specific JSON Schema. The method tries to extract the schema from the message.\n"
  example: []
  syntax:
    content: public static ValidationResult ValidateSchema(string jsonMessage, out IList<string> validationErrors)
    parameters:
    - id: jsonMessage
      type: System.String
      description: JSON message as string
    - id: validationErrors
      type: System.Collections.Generic.IList{System.String}
      description: Possible validation errors as list of strings
    return:
      type: Conizi.Model.Core.Entities.ValidationResult
      description: <xref href="Conizi.Model.Core.Entities.ValidationResult" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ValidateSchema(jsonMessage As String, ByRef validationErrors As IList(Of String)) As ValidationResult
  overload: Conizi.Model.Core.Tools.Validator.ValidateSchema*
  nameWithType.vb: Validator.ValidateSchema(String, ByRef IList(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.String, ByRef System.Collections.Generic.IList(Of System.String))
  name.vb: ValidateSchema(String, ByRef IList(Of String))
- uid: Conizi.Model.Core.Tools.Validator.ValidateSchema``1(System.String,System.Collections.Generic.IList{System.String}@)
  commentId: M:Conizi.Model.Core.Tools.Validator.ValidateSchema``1(System.String,System.Collections.Generic.IList{System.String}@)
  id: ValidateSchema``1(System.String,System.Collections.Generic.IList{System.String}@)
  parent: Conizi.Model.Core.Tools.Validator
  langs:
  - csharp
  - vb
  name: ValidateSchema<TModel>(String, out IList<String>)
  nameWithType: Validator.ValidateSchema<TModel>(String, out IList<String>)
  fullName: Conizi.Model.Core.Tools.Validator.ValidateSchema<TModel>(System.String, out System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Validator.cs
      branch: schemagenerator
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: ValidateSchema
    path: ../src/Conizi.Model.Core/Tools/Validator.cs
    startLine: 64
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  syntax:
    content: public static ValidationResult ValidateSchema<TModel>(string jsonMessage, out IList<string> validationErrors)
    parameters:
    - id: jsonMessage
      type: System.String
    - id: validationErrors
      type: System.Collections.Generic.IList{System.String}
    typeParameters:
    - id: TModel
    return:
      type: Conizi.Model.Core.Entities.ValidationResult
    content.vb: Public Shared Function ValidateSchema(Of TModel)(jsonMessage As String, ByRef validationErrors As IList(Of String)) As ValidationResult
  overload: Conizi.Model.Core.Tools.Validator.ValidateSchema*
  nameWithType.vb: Validator.ValidateSchema(Of TModel)(String, ByRef IList(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Conizi.Model.Core.Tools.Validator.ValidateSchema(Of TModel)(System.String, ByRef System.Collections.Generic.IList(Of System.String))
  name.vb: ValidateSchema(Of TModel)(String, ByRef IList(Of String))
- uid: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.Type,System.String,System.Collections.Generic.IList{System.String}@)
  commentId: M:Conizi.Model.Core.Tools.Validator.ValidateSchema(System.Type,System.String,System.Collections.Generic.IList{System.String}@)
  id: ValidateSchema(System.Type,System.String,System.Collections.Generic.IList{System.String}@)
  parent: Conizi.Model.Core.Tools.Validator
  langs:
  - csharp
  - vb
  name: ValidateSchema(Type, String, out IList<String>)
  nameWithType: Validator.ValidateSchema(Type, String, out IList<String>)
  fullName: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.Type, System.String, out System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Validator.cs
      branch: schemagenerator
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: ValidateSchema
    path: ../src/Conizi.Model.Core/Tools/Validator.cs
    startLine: 76
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nValidate a JSON message vs the specific JSON Schema.\n"
  example: []
  syntax:
    content: public static ValidationResult ValidateSchema(Type model, string jsonMessage, out IList<string> validationErrors)
    parameters:
    - id: model
      type: System.Type
      description: Type of the used C# model
    - id: jsonMessage
      type: System.String
      description: JSON message as string
    - id: validationErrors
      type: System.Collections.Generic.IList{System.String}
      description: Possible validation errors as list of strings
    return:
      type: Conizi.Model.Core.Entities.ValidationResult
      description: <xref href="Conizi.Model.Core.Entities.ValidationResult" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ValidateSchema(model As Type, jsonMessage As String, ByRef validationErrors As IList(Of String)) As ValidationResult
  overload: Conizi.Model.Core.Tools.Validator.ValidateSchema*
  nameWithType.vb: Validator.ValidateSchema(Type, String, ByRef IList(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Conizi.Model.Core.Tools.Validator.ValidateSchema(System.Type, System.String, ByRef System.Collections.Generic.IList(Of System.String))
  name.vb: ValidateSchema(Type, String, ByRef IList(Of String))
references:
- uid: Conizi.Model.Core.Tools
  commentId: N:Conizi.Model.Core.Tools
  name: Conizi.Model.Core.Tools
  nameWithType: Conizi.Model.Core.Tools
  fullName: Conizi.Model.Core.Tools
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense*
  commentId: Overload:Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense
  name: RegisterJsonSchemaLicense
  nameWithType: Validator.RegisterJsonSchemaLicense
  fullName: Conizi.Model.Core.Tools.Validator.RegisterJsonSchemaLicense
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Conizi.Model.Core.Entities.ValidationResult
  commentId: T:Conizi.Model.Core.Entities.ValidationResult
  parent: Conizi.Model.Core.Entities
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: Conizi.Model.Core.Entities.ValidationResult
- uid: Conizi.Model.Core.Tools.Validator.ValidateSchema*
  commentId: Overload:Conizi.Model.Core.Tools.Validator.ValidateSchema
  name: ValidateSchema
  nameWithType: Validator.ValidateSchema
  fullName: Conizi.Model.Core.Tools.Validator.ValidateSchema
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Conizi.Model.Core.Entities
  commentId: N:Conizi.Model.Core.Entities
  name: Conizi.Model.Core.Entities
  nameWithType: Conizi.Model.Core.Entities
  fullName: Conizi.Model.Core.Entities
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
