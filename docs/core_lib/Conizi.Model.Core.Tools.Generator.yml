### YamlMime:ManagedReference
items:
- uid: Conizi.Model.Core.Tools.Generator
  commentId: T:Conizi.Model.Core.Tools.Generator
  id: Generator
  parent: Conizi.Model.Core.Tools
  children:
  - Conizi.Model.Core.Tools.Generator.Generate(Type)
  - Conizi.Model.Core.Tools.Generator.Generate``1
  - Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense(System.String)
  langs:
  - csharp
  - vb
  name: Generator
  nameWithType: Generator
  fullName: Conizi.Model.Core.Tools.Generator
  type: Class
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Generator.cs
      branch: master
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: Generator
    path: ../src/Conizi.Model.Core/Tools/Generator.cs
    startLine: 16
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nThe conizi schema generator is used to generate a JSON Schema out of the conizi C# models\n"
  example: []
  syntax:
    content: 'public static class Generator : object'
    content.vb: >-
      Public Module Generator
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense(System.String)
  commentId: M:Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense(System.String)
  id: RegisterJsonSchemaLicense(System.String)
  parent: Conizi.Model.Core.Tools.Generator
  langs:
  - csharp
  - vb
  name: RegisterJsonSchemaLicense(String)
  nameWithType: Generator.RegisterJsonSchemaLicense(String)
  fullName: Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense(System.String)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Generator.cs
      branch: master
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: RegisterJsonSchemaLicense
    path: ../src/Conizi.Model.Core/Tools/Generator.cs
    startLine: 22
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nRegister a JsonSchema License if available\n"
  example: []
  syntax:
    content: public static void RegisterJsonSchemaLicense(string license)
    parameters:
    - id: license
      type: System.String
      description: <a href="https://www.nuget.org/packages/Newtonsoft.Json.Schema/">Newtonsoft.Json.Schema</a> license as string
    content.vb: Public Shared Sub RegisterJsonSchemaLicense(license As String)
  overload: Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Conizi.Model.Core.Tools.Generator.Generate``1
  commentId: M:Conizi.Model.Core.Tools.Generator.Generate``1
  id: Generate``1
  parent: Conizi.Model.Core.Tools.Generator
  langs:
  - csharp
  - vb
  name: Generate<TModel>()
  nameWithType: Generator.Generate<TModel>()
  fullName: Conizi.Model.Core.Tools.Generator.Generate<TModel>()
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Generator.cs
      branch: master
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: Generate
    path: ../src/Conizi.Model.Core/Tools/Generator.cs
    startLine: 32
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nGenerate a JSON schema from the C# model of type T\n"
  example: []
  syntax:
    content: public static GenerationResult Generate<TModel>()
    typeParameters:
    - id: TModel
      description: The C# model type, should be generated to a JSON schema
    return:
      type: Conizi.Model.Core.Entities.GenerationResult
      description: <xref href="Conizi.Model.Core.Entities.GenerationResult" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Generate(Of TModel) As GenerationResult
  overload: Conizi.Model.Core.Tools.Generator.Generate*
  nameWithType.vb: Generator.Generate(Of TModel)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Conizi.Model.Core.Tools.Generator.Generate(Of TModel)()
  name.vb: Generate(Of TModel)()
- uid: Conizi.Model.Core.Tools.Generator.Generate(Type)
  commentId: M:Conizi.Model.Core.Tools.Generator.Generate(Type)
  id: Generate(Type)
  parent: Conizi.Model.Core.Tools.Generator
  langs:
  - csharp
  - vb
  name: Generate(Type)
  nameWithType: Generator.Generate(Type)
  fullName: Conizi.Model.Core.Tools.Generator.Generate(Type)
  type: Method
  source:
    remote:
      path: src/Conizi.Model.Core/Tools/Generator.cs
      branch: master
      repo: https://git.fleetboard-logistics.com/conizi/plattform/semanticmodel.git
    id: Generate
    path: ../src/Conizi.Model.Core/Tools/Generator.cs
    startLine: 42
  assemblies:
  - Conizi.Model.Core
  namespace: Conizi.Model.Core.Tools
  summary: "\nGenerate a JSON schema from the C# model instance type\n"
  example: []
  syntax:
    content: public static GenerationResult Generate(Type modelType)
    parameters:
    - id: modelType
      type: Type
      description: Type of the C# model instance
    return:
      type: Conizi.Model.Core.Entities.GenerationResult
      description: <xref href="Conizi.Model.Core.Entities.GenerationResult" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Generate(modelType As Type) As GenerationResult
  overload: Conizi.Model.Core.Tools.Generator.Generate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Conizi.Model.Core.Tools
  commentId: N:Conizi.Model.Core.Tools
  name: Conizi.Model.Core.Tools
  nameWithType: Conizi.Model.Core.Tools
  fullName: Conizi.Model.Core.Tools
- uid: Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense*
  commentId: Overload:Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense
  name: RegisterJsonSchemaLicense
  nameWithType: Generator.RegisterJsonSchemaLicense
  fullName: Conizi.Model.Core.Tools.Generator.RegisterJsonSchemaLicense
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Conizi.Model.Core.Entities.GenerationResult
  commentId: T:Conizi.Model.Core.Entities.GenerationResult
  parent: Conizi.Model.Core.Entities
  name: GenerationResult
  nameWithType: GenerationResult
  fullName: Conizi.Model.Core.Entities.GenerationResult
- uid: Conizi.Model.Core.Tools.Generator.Generate*
  commentId: Overload:Conizi.Model.Core.Tools.Generator.Generate
  name: Generate
  nameWithType: Generator.Generate
  fullName: Conizi.Model.Core.Tools.Generator.Generate
- uid: Conizi.Model.Core.Entities
  commentId: N:Conizi.Model.Core.Entities
  name: Conizi.Model.Core.Entities
  nameWithType: Conizi.Model.Core.Entities
  fullName: Conizi.Model.Core.Entities
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
